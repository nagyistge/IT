#! /bin/bash

# configure and mount s3ql file system with local swift cluster

swiftCreds() {
  if ! [[ -z $OS_USERNAME ]]; then
    swiftaccount=$OS_USERNAME
    swiftpassword=$OS_PASSWORD
    swiftauthurl=$OS_AUTH_URL
  elif ! [[ -z $ST_USER ]]; then
    swiftaccount=$ST_USER
    swiftpassword=$ST_KEY
    swiftauthurl=$ST_AUTH
  else
    swiftauthurl=$ST_AUTH
  fi
}

swiftCreds
user=`whoami`
scriptname=${0##*/}

if ! hash mount.s3ql 2>/dev/null; then
  echo "s3ql file system not installed, please ask your system adminstrator to run these commands:"
  echo "sudo apt-get install software-properties-common python-software-properties"
  echo "sudo add-apt-repository ppa:nikratio/s3ql"
  echo "sudo apt-get update && apt-get -y install s3ql"
  exit 1
fi

if [[ -z $swiftaccount ]]; then
  echo " *** Swift credentials not set. ***"
  echo "Please execute 'sw2account <accountname>' to get credentials."
  echo "Use 'sw2account --save <accountname>' to set them as default."
  echo "  Example: sw2account lastname_f"
  echo "If the 'sw2account' command does not exist please ask your"
  echo "local System Administrator to install swift-switch-account."
  exit 1
fi


container=$1
if [[ -z $1 ]]; then
  container="s3ql"
  read -r -p "Do you want to upgrade and mount default container $container from swift account $swiftaccount ? [Y/N] " response
  case "$response" in
    [yY][eE][sS]|[yY])
      echo "using default container name 's3ql'"
      ;;
    *)
      echo "please call $scriptname [container] to create and mount a container with a different name."
      exit
  esac
  echo "using default container name 's3ql'"
fi
compress="--compress=zlib-6"
if ! [[ -z $2 ]]; then
  compress="--compress=$2"
  echo "using compression $2"
fi

authinf="authinfo2_"$swiftaccount
authinf="$authinf"_$container

#echo "authinf:$authinf"
#echo "swiftaccount:$swiftaccount"
#echo "container:$container"


s3qlurl=${swiftauthurl/"https://"/"swift://"}
s3qlurl=${s3qlurl/"/auth/v1.0"/":443/$container"}
shortaccount=${swiftaccount/"Swift_"/""}

echo "using swift url: $s3qlurl"

allow_other=""
if [[ "$user" == "root" ]]; then
  allow_other="--allow-other"
fi

echo "unmounting ..."
if [[ -f /etc/init/s3ql_${shortaccount}_${container}.conf ]]; then
  service "s3ql_${shortaccount}_${container}" stop
else
  umount.s3ql /mnt/tin/$shortaccount/$container
fi
echo "...running fsck.s3ql --debug --authfile ~/.s3ql/$authinf $s3qlurl"
fsck.s3ql --debug --authfile ~/.s3ql/$authinf $s3qlurl
echo "...update s3ql package"
apt-get update && apt-get -y install s3ql
echo "...upgrade file system"
s3qladm --authfile ~/.s3ql/$authinf upgrade $s3qlurl
echo "...running fsck.s3ql --debug --authfile ~/.s3ql/$authinf $s3qlurl"
fsck.s3ql --debug --authfile ~/.s3ql/$authinf $s3qlurl

cachedir=""
if [[ -d /loc/ssd ]]; then
  cachedir="--cachedir=/loc/ssd/.s3ql"
  mkdir -p /loc/ssd/.s3ql
elif [[ -d /loc ]]; then
  cachedir="--cachedir=/loc/.s3ql"
  mkdir -p /loc/.s3ql
fi

if [[ -f /etc/init/s3ql_${shortaccount}_${container}.conf ]]; then
  echo "starting s3ql service"
  service "s3ql_${shortaccount}_${container}" start
else
  echo "...running mount.s3ql --authfile ~/.s3ql/$authinf $allow_other $compress $cachedir --metadata-upload-interval 21600 $s3qlurl /mnt/tin/$shortaccount/$container"
  mount.s3ql --authfile ~/.s3ql/$authinf $allow_other $compress $cachedir --metadata-upload-interval 21600 $s3qlurl /mnt/tin/$shortaccount/$container
  echo -e "\nto unmount use this command:"
  echo "umount.s3ql /mnt/tin/$shortaccount/$container"
fi
