#! /bin/bash

# configure and mount s3ql file system with local swift cluster

swiftCreds() {
  if ! [[ -z $OS_USERNAME ]]; then
    swiftaccount=$OS_USERNAME
    swiftpassword=$OS_PASSWORD
    swiftauthurl=$OS_AUTH_URL
  elif ! [[ -z $ST_USER ]]; then
    swiftaccount=$ST_USER
    swiftpassword=$ST_KEY
    swiftauthurl=$ST_AUTH
  else
    swiftauthurl=$ST_AUTH
  fi
}

swiftCreds
user=`whoami`
scriptname=${0##*/}

if ! hash mount.s3ql 2>/dev/null; then
  echo "s3ql file system not installed, please ask your system adminstrator to run these commands:"
  echo "sudo apt-get install software-properties-common python-software-properties"
  echo "sudo add-apt-repository ppa:nikratio/s3ql"
  echo "sudo apt-get update && apt-get -y install s3ql"
  exit 1
fi

if [[ -z $swiftaccount ]]; then
  echo " *** Swift credentials not set. ***"
  echo "Please execute 'sw2account <accountname>' to get credentials."
  echo "Use 'sw2account --save <accountname>' to set them as default."
  echo "  Example: sw2account lastname_f"
  echo "If the 'sw2account' command does not exist please ask your"
  echo "local System Administrator to install swift-switch-account."
  exit 1
fi

fstype=`stat -f -L -c %T ~/`
if [[ $fstype == "nfs" ]]; then
  echo "The home directory of user $user is nfs mounted. This is not supported."
  echo "Please run this script as a user that has a local home directory"
  exit 1
fi

if [ -d $MODULESHOME ]; then
  module load python3 > /dev/null 2>&1
fi

if ! hash swift 2>/dev/null; then
  echo "swift client is not installed. please ask your system adminstrator to install python-swiftclient"
fi

container=$1
if [[ -z $1 ]]; then
  container="s3ql"
  read -r -p "Do you want to mount default container $container from swift account $swiftaccount ? [Y/N] " response
  case "$response" in
    [yY][eE][sS]|[yY])
      echo "using default container name 's3ql'"
      ;;
    *)
      echo "please call $scriptname [container] to create and mount a container with a different name."
      exit
  esac
  echo "using default container name 's3ql'"
fi
compress="--compress=zlib-6"
if ! [[ -z $2 ]]; then
  compress="--compress=$2"
  echo "using compression $2"
fi

authinf="authinfo2_"$swiftaccount
authinf="$authinf"_$container

#echo "authinf:$authinf"
#echo "swiftaccount:$swiftaccount"
#echo "container:$container"

echo "creating container $container ..."
swift post $container

s3qlurl=${swiftauthurl/"https://"/"swift://"}
s3qlurl=${s3qlurl/"/auth/v1.0"/":443/$container"}
shortaccount=${swiftaccount/"Swift_"/""}

echo "using swift url: $s3qlurl"
echo "writing credentials for $swiftaccount to: ~/.s3ql/$authinf"
mkdir -p ~/.s3ql
echo "[swift]" > ~/.s3ql/$authinf
echo "storage-url: $s3qlurl" >> ~/.s3ql/$authinf
echo "backend-login: $swiftaccount" >> ~/.s3ql/$authinf
echo "backend-password: $swiftpassword" >> ~/.s3ql/$authinf
chmod 600 ~/.s3ql/$authinf

allow_other=""
if [[ "$user" == "root" ]]; then
  allow_other="--allow-other"
fi

echo "...running mkfs.s3ql --max-obj-size=128000 --authfile ~/.s3ql/$authinf --plain $s3qlurl"
mkfs.s3ql --max-obj-size=128000 --authfile ~/.s3ql/$authinf --plain $s3qlurl
echo "...running fsck.s3ql --debug --authfile ~/.s3ql/$authinf $s3qlurl"
fsck.s3ql --debug --authfile ~/.s3ql/$authinf $s3qlurl
mkdir -p /mnt/tin/$shortaccount/$container

cachedir=""
if [[ -d /loc/ssd ]]; then
  cachedir="--cachedir=/loc/ssd/.s3ql"
  mkdir -p /loc/ssd/.s3ql
elif [[ -d /loc ]]; then
  cachedir="--cachedir=/loc/.s3ql"
  mkdir -p /loc/.s3ql
fi



#######################################
authfile=~/.s3ql/$authinf
iface=`ip link | grep "state UP" | awk '{print $2}' | head -1` # get active interface 
iface=${iface%?} #remove last char 

read -d '' s3qlinit <<- EOF
description	"S3QL Backup File System"
author		"Nikolaus Rath <Nikolaus@rath.org>"

start on (filesystem and net-device-up IFACE=${iface})

# We cannot use "stop on runlevel [016]" because from that point on we
# have only 10 seconds until the system shuts down completely.
stop on starting rc RUNLEVEL=[016]

# Time to wait before sending SIGKILL to the daemon and
# pre-stop script
kill timeout 300

env STORAGE_URL="${s3qlurl}"
env MOUNTPOINT="/mnt/tin/${shortaccount}/${container}"

env USER="${user}"
env AUTHFILE="${authfile}"

expect stop

script
    # Redirect stdout and stderr into the system log
    DIR=\$(mktemp -d)
    mkfifo "\$DIR/LOG_FIFO"
    logger -t s3ql -p local0.info < "\$DIR/LOG_FIFO" &
    exec > "\$DIR/LOG_FIFO"
    exec 2>&1
    rm -rf "\$DIR"

    # Check and mount file system
    su -s /bin/sh -c 'exec "\$0" "\$@"' "\$USER" -- fsck.s3ql --batch --authfile "\$AUTHFILE" "\$STORAGE_URL"
    exec su -s /bin/sh -c 'exec "\$0" "\$@"' "\$USER" -- mount.s3ql --upstart --authfile "\$AUTHFILE" $allow_other $compress $cachedir --metadata-upload-interval 21600 "\$STORAGE_URL" "\$MOUNTPOINT"
end script

pre-stop script
    su -s /bin/sh -c 'exec "\$0" "\$@"' "\$USER" -- umount.s3ql "\$MOUNTPOINT"
end script
EOF

doupstart=1
if [[ "$user" == "root" ]]; then
  read -r -p "Do you want to activate upstart /etc/init/s3ql_${shortaccount}_${container}.conf ? [Y/N] " response
  case "$response" in
    [yY][eE][sS]|[yY])
      echo "$s3qlinit" > "/etc/init/s3ql_${shortaccount}_${container}.conf"
      echo "created /etc/init/s3ql_${shortaccount}_${container}.conf"
      service "s3ql_${shortaccount}_${container}" start
      echo "to stop s3ql execute: service s3ql_${shortaccount}_${container} stop"
      ;;
    *)
      doupstart=0
  esac
else
  doupstart=0
fi
if [[ doupstart -eq 0 ]]; then
  echo "$s3qlinit" > "/tmp/s3ql_${shortaccount}_${container}.conf"
  echo "created upstart config /tmp/s3ql_${shortaccount}_${container}.conf for later use"
  echo "...running mount.s3ql --authfile ~/.s3ql/$authinf $allow_other $compress $cachedir --metadata-upload-interval 21600 $s3qlurl /mnt/tin/$shortaccount/$container"
  mount.s3ql --authfile ~/.s3ql/$authinf $allow_other $compress $cachedir --metadata-upload-interval 21600 $s3qlurl /mnt/tin/$shortaccount/$container
  echo -e "\nto unmount use this command:"
  echo "umount.s3ql /mnt/tin/$shortaccount/$container"
fi
echo "*** IMPORTANT ***: please ask the storage team to set header X-Undelete-Enabled:no for container $swiftaccount/$container to optimze performance and stability" 

